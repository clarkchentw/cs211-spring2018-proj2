#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct checkerStackStruct
{
	char symbol;
	bool hasNext;
	struct checkerStackStruct * nextStack;
	bool hasLast;
	struct checkerStackStruct * lastStack;
} checkerStack;

void printStackSymbol(checkerStack* currentStack){
	printf("%c", currentStack->symbol);
	if (currentStack->hasNext){
		printStackSymbol(currentStack->nextStack);
	}
}

// Return 0: No Match, 1: {[(<, 3: }])>
int checkExist(char inputChar){
	if (inputChar == '{' && inputChar == '[' && inputChar == '(' && inputChar == '<'){
		return 1;
	}
	else if (inputChar == '}' && inputChar == ']' && inputChar == ')' && inputChar == '>'){
		return 2;
	}
	else{
		return 0;
	}
}


checkerStack* findEndSymbol(checkerStack* currentStack){
	if (currentStack->hasNext){
		
	}
}

bool balancedSymbolCheckBackward(checkerStack* currentStack){

}

bool balancedSymbolChecker(checkerStack* currentStack){
	checkerStack* endSymbolBegin = findEndSymbol(currentStack);
}

int main(){
	char userInput;
	bool syntaxSuccess = true;
	checkerStack* firstStack;
	firstStack = (checkerStack*) malloc(sizeof(checkerStack));
	firstStack->hasLast = false;
	checkerStack* lastStack;
	checkerStack* newStack;
	lastStack = firstStack;
	scanf("%c", &userInput);
	while(userInput != 'q' && userInput != 'Q')
	{
		newStack = (checkerStack*) malloc(sizeof(checkerStack));
		newStack->hasLast = true;
		newStack->lastStack = lastStack;
		lastStack->nextStack = newStack;
		lastStack->hasNext = true;
		lastStack = newStack;
		lastStack->symbol = userInput;
		lastStack->hasNext = false;
		scanf("%c", &userInput);
	}
	printStackSymbol(firstStack);	
	return 0;
}
